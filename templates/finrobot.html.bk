<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Financial Analyzer</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-900">
<div id="root" class="max-w-7xl mx-auto p-6"></div>
<script type="text/babel">
const setupStepsList = [
  { key: "api", label: "Setting up APIs" },
  { key: "llm", label: "Setting up LLM Model" },
  { key: "agents", label: "Setting up Agents" },
  { key: "tools", label: "Setting up Tools" },
  { key: "region", label: "Resolving Company Region & Peers" },
];

// Utility for status color
const statusColor = {
  pending: "bg-yellow-400",
  success: "bg-green-500",
  error: "bg-red-500",
};


function SetupProgress() {
  return (
    <div className="bg-white rounded-lg shadow p-4 mb-4">
      <div className="font-semibold mb-2">Setup Progress</div>
      <table className="w-full text-xs">
        <tbody>
          <tr>
            <td><span className="inline-block w-4 h-4 rounded-full bg-yellow-400 border border-gray-300"></span></td>
            <td>Setting up APIs</td>
          </tr>
          <tr>
            <td><span className="inline-block w-4 h-4 rounded-full bg-yellow-400 border border-gray-300"></span></td>
            <td>Setting up LLM Model</td>
          </tr>
          <tr>
            <td><span className="inline-block w-4 h-4 rounded-full bg-yellow-400 border border-gray-300"></span></td>
            <td>Setting up Agents</td>
          </tr>
          <tr>
            <td><span className="inline-block w-4 h-4 rounded-full bg-yellow-400 border border-gray-300"></span></td>
            <td>Setting up Tools</td>
          </tr>
          <tr>
            <td><span className="inline-block w-4 h-4 rounded-full bg-yellow-400 border border-gray-300"></span></td>
            <td>Resolving Company Region & Peers</td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}

function LoggingSetupStatus({ setupStatus }) {
  return (
    <div className="bg-white rounded-lg shadow p-4 mb-4">
      <div className="font-semibold mb-2">Setup Progress</div>
      <table className="w-full text-xs">
        <tbody>
          {setupStepsList.map((step) => (
            <tr key={step.key}>
              <td className="pr-2 py-1">
                <span
                  className={`inline-block w-4 h-4 rounded-full border border-gray-300 ${statusColor[setupStatus[step.key] || "pending"]}`}
                  title={setupStatus[step.key]}
                ></span>
              </td>
              <td className="py-1">{step.label}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
const { useState, useEffect, useRef } = React;

// ========== Icon Components ==========
const IconKey = () => (
  <svg className="h-4 w-4 text-gray-400 mr-1" fill="none" viewBox="0 0 24 24">
    <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="2"/>
    <path d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke="currentColor" strokeWidth="2"/>
  </svg>
);

const IconChart = () => (
  <svg className="h-4 w-4 text-blue-400 mr-1" fill="none" viewBox="0 0 24 24">
    <path d="M4 20V10M12 20V4M20 20V14" stroke="currentColor" strokeWidth="2"/>
  </svg>
);

const IconLLM = () => (
  <svg className="h-4 w-4 text-purple-400 mr-1" fill="none" viewBox="0 0 24 24">
    <rect x="4" y="4" width="16" height="16" stroke="currentColor" strokeWidth="2"/>
    <circle cx="12" cy="12" r="3" stroke="currentColor" strokeWidth="2"/>
  </svg>
);

const IconPipeline = () => (
  <svg className="h-4 w-4 text-green-400 mr-1" fill="none" viewBox="0 0 24 24">
    <rect x="4" y="10" width="16" height="4" stroke="currentColor" strokeWidth="2"/>
    <circle cx="8" cy="12" r="2" stroke="currentColor" strokeWidth="2"/>
    <circle cx="16" cy="12" r="2" stroke="currentColor" strokeWidth="2"/>
  </svg>
);

const IconSpinner = () => (
  <svg className="animate-spin h-5 w-5 mr-2 text-blue-500" viewBox="0 0 24 24" fill="none">
    <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
  </svg>
);

// ========== UI Components ==========
const ModelSelection = ({ models, selectedModel, setSelectedModel, isRunning }) => (
  <div className="mb-3">
    <label className="block text-xs text-gray-500 mb-2">Select LLM Model</label>
    <div className="space-y-2">
      {models.map(model => (
        <div key={model.id} className="flex items-center">
          <input
            type="radio"
            id={`model-${model.id}`}
            name="llm-model"
            value={model.id}
            checked={selectedModel === model.id}
            onChange={() => setSelectedModel(model.id)}
            disabled={isRunning}
            className="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
          />
          <label htmlFor={`model-${model.id}`} className="ml-2 text-sm">
            <span className="font-mono mr-2">[{model.id}]</span>
            {model.name}
          </label>
        </div>
      ))}
    </div>
  </div>
);

const AnalysisConfig = ({ 
  company, setCompany, 
  year, setYear, 
  reportType, setReportType,
  selectedModel, setSelectedModel,
  availableModels,
  isRunning, onStart,
  verbose, setVerbose 
}) => (
  <div className="bg-white rounded-lg shadow p-4 mb-4">
    <div className="flex items-center font-semibold mb-2">
      <IconKey />
      Analysis Configuration
    </div>
    <div className="mb-2">
      <label className="block text-xs text-gray-500">Company Name or Ticker</label>
      <input
        className="border px-2 py-1 rounded w-full"
        value={company}
        onChange={e => setCompany(e.target.value)}
        disabled={isRunning}
      />
    </div>
    <div className="flex gap-2 mb-2">
      <div className="flex-1">
        <label className="block text-xs text-gray-500">Year</label>
        <select
          className="border px-2 py-1 rounded w-full"
          value={year}
          onChange={e => setYear(e.target.value)}
          disabled={isRunning}
        >
          {[2025,2024,2023,2022,2021].map(y => (
            <option key={y} value={y}>{y}</option>
          ))}
        </select>
      </div>
      <div className="flex-1">
        <label className="block text-xs text-gray-500">Report Type</label>
        <select
          className="border px-2 py-1 rounded w-full"
          value={reportType}
          onChange={e => setReportType(e.target.value)}
          disabled={isRunning}
        >
          <option value="kpi_bullet_insights">KPI Insights</option>
        </select>
      </div>
    </div>
    <div className="mb-3">
      <label className="inline-flex items-center">
        <input
          type="checkbox"
          className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
          checked={verbose}
          onChange={e => setVerbose(e.target.checked)}
          disabled={isRunning}
        />
        <span className="ml-2 text-sm">Verbose (debug logging)</span>
      </label>
    </div>
    
    <ModelSelection 
      models={availableModels}
      selectedModel={selectedModel}
      setSelectedModel={setSelectedModel}
      isRunning={isRunning}
    />
    
    <button
      className="w-full py-2 bg-indigo-600 text-white rounded font-semibold flex items-center justify-center"
      onClick={onStart}
      disabled={isRunning}
    >
      {isRunning ? <><IconSpinner /> Processing...</> : "Start Analysis"}
    </button>
  </div>
);

const LLMUsage = ({ llmCalls }) => (
  <div className="bg-white rounded-lg shadow p-4 mb-4">
    <div className="flex items-center font-semibold mb-2">
      <IconLLM />
      LLM Usage
    </div>
    <div className="text-xs text-gray-500">
      {llmCalls === 0 ? "No LLM calls yet." : `${llmCalls} LLM call${llmCalls > 1 ? "s" : ""} made.`}
    </div>
  </div>
);

const PipelineKPIs = ({ kpis, reportUrl }) => {
  const toolSuccess = kpis.tool_calls > 0 
    ? `${kpis.successful_tool_calls}/${kpis.tool_calls}` 
    : "N/A";
  
  return (
    <div className="bg-white rounded-lg shadow p-4">
      <div className="flex items-center font-semibold mb-2">
        <IconPipeline />
        Pipeline KPIs
      </div>
      <div className="text-xs">
        <div className="flex justify-between"><span>End-to-End Latency:</span> <span>{kpis.latency.toFixed(2)}s</span></div>
        <div className="flex justify-between"><span>Total LLM Tokens:</span> <span>{kpis.tokens}</span></div>
        <div className="flex justify-between"><span>Estimated LLM Cost:</span> <span>${kpis.cost.toFixed(5)}</span></div>
        <div className="flex justify-between"><span>Tool Call Success:</span> <span>{toolSuccess}</span></div>
        <div className="flex justify-between"><span>Pipeline Errors:</span> <span>{kpis.errors}</span></div>
        <div className="flex justify-between mt-2 text-gray-400"><span>LLM-as-Judge Metrics (Post-run)</span></div>
        <div className="flex justify-between"><span>Answer Relevance:</span> <span>{kpis.relevance ?? "N/A"}</span></div>
        <div className="flex justify-between"><span>Faithfulness:</span> <span>{kpis.faithfulness ?? "N/A"}</span></div>
      </div>
      
      {reportUrl && (
        <a 
          href={reportUrl} 
          className="mt-3 block py-2 bg-green-600 text-white text-center rounded hover:bg-green-700"
          download
        >
          Download Report
        </a>
      )}
    </div>
  );
};


function AgentSetupSidebar({ region, agentSetup }) {
  if (!agentSetup || !agentSetup.leader || !agentSetup.agents) return null;

  return (
    <div className="bg-white rounded-lg shadow p-4 mb-4 max-h-[400px] overflow-y-auto">
      <div className="flex items-center font-semibold mb-3">
        <svg className="h-5 w-5 text-blue-600 mr-2" fill="none" viewBox="0 0 24 24">
          <circle cx="12" cy="8" r="3.5" stroke="currentColor" strokeWidth="1.5" />
          <path d="M5 15C5 12.2386 7.23858 10 10 10H14C16.7614 10 19 12.2386 19 15V16C19 17.1046 18.1046 18 17 18H7C5.89543 18 5 17.1046 5 16V15Z"
                stroke="currentColor" strokeWidth="1.5" />
        </svg>
        <h2 className="text-lg font-semibold">Agent Setup - {region === 'IN' ? 'India' : 'US'}</h2>
      </div>

      <section className="mb-4">
        <h3 className="font-semibold text-md mb-2 flex items-center">
          <svg className="h-4 w-4 text-yellow-500 mr-1" fill="none" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="8" stroke="currentColor" strokeWidth="1.5" />
            <path d="M12 8V12M12 12L14 14" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
          </svg>
          Leader
        </h3>
        <div className="ml-5">
          <p className="font-semibold">{agentSetup.leader.title}</p>
          <ul className="list-disc list-inside text-sm text-gray-700">
            {agentSetup.leader.responsibilities.map((resp, idx) => (
              <li key={idx}>{resp}</li>
            ))}
          </ul>
        </div>
      </section>

      <section>
        <h3 className="font-semibold text-md mb-2 flex items-center">
          <svg className="h-4 w-4 text-gray-500 mr-1" fill="none" viewBox="0 0 24 24">
            <rect x="4" y="4" width="16" height="16" rx="2" stroke="currentColor" strokeWidth="1.5" />
            <path d="M8 12H16M12 8V16" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
          </svg>
          Agents
        </h3>
        <div className="ml-5 space-y-3">
          {agentSetup.agents.map((agent, idx) => (
            <div key={idx}>
              <p className="font-semibold text-sm">{agent.title}</p>
              <ul className="list-disc list-inside text-sm text-gray-600">
                {agent.responsibilities.map((resp, i) => (
                  <li key={i}>{resp}</li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </section>
    </div>
  );
}


const AgentToolTable = ({ agentSteps }) => (
  <div className="bg-white rounded-lg shadow p-4 mb-4">
    <div className="font-semibold mb-2">Agent & Tool Execution</div>
    <table className="min-w-full text-xs">
      <thead>
        <tr className="border-b">
          <th className="text-left py-1">AGENT</th>
          <th className="text-left py-1">TOOL</th>
          <th className="text-left py-1">STATUS</th>
          <th className="text-left py-1">DURATION</th>
        </tr>
      </thead>
      <tbody>
        {agentSteps.length === 0 ? (
          <tr>
            <td colSpan={4} className="py-2 text-gray-400 text-center">No agent steps yet.</td>
          </tr>
        ) : (
          agentSteps.map((step, i) => (
            <tr key={i} className="border-b last:border-0">
              <td>{step.agentName}</td>
              <td>{step.toolName}</td>
              <td>
                {step.status === "Running" && <span className="text-blue-600">Running</span>}
                {step.status === "Completed" && <span className="text-green-600">Completed</span>}
                {step.status === "Error" && <span className="text-red-600">Error</span>}
              </td>
              <td>{step.duration ? `${step.duration.toFixed(0)} ms` : "..."}</td>
            </tr>
          ))
        )}
      </tbody>
    </table>
  </div>
);

const RawEventLog = ({ log }) => (
  <div className="bg-gray-900 rounded-lg shadow p-4 text-xs text-white font-mono h-40 overflow-y-auto">
    <div className="flex gap-4 mb-1">
      <span className="font-semibold text-gray-300">Raw Event Log</span>
    </div>
    <div>
      {log.length === 0
        ? <div className="text-gray-500">No events yet.</div>
        : log.map((line, i) => <div key={i}>{line}</div>)
      }
    </div>
  </div>
);

// ========== Main App Component ==========
function App() {
  // State management
  const closedByComplete = useRef(false);
  const closedByPipeline = useRef(false);
  const [company, setCompany] = useState("Microsoft");
  const [year, setYear] = useState("2024");
  const [reportType, setReportType] = useState("kpi_bullet_insights");
  const [selectedModel, setSelectedModel] = useState(null);
  const [isRunning, setIsRunning] = useState(false);
  const [error, setError] = useState(null);
  const [reportUrl, setReportUrl] = useState(null);
  const [availableModels, setAvailableModels] = useState(null);
  const [verbose, setVerbose] = useState(false);
  const [agentSetup, setAgentSetup] = useState(null);
  const [region, setRegion] = useState("US");
  // Status: "pending" (yellow), "success" (green), "error" (red)
  const [setupStatus, setSetupStatus] = useState({
    api: "pending",
    llm: "pending",
    agents: "pending",
    tools: "pending",
    region: "pending",
  });

  // Real-time analysis state
  const [agentSteps, setAgentSteps] = useState([]);
  const [log, setLog] = useState([]);
  const [llmCalls, setLlmCalls] = useState(0);
  const [kpis, setKpis] = useState({
    latency: 0,
    tokens: 0,
    cost: 0,
    tool_calls: 0,
    successful_tool_calls: 0,
    errors: 0,
    relevance: "N/A",
    faithfulness: "N/A"
  });

  // Ref for EventSource connection
  const eventSourceRef = useRef(null);

  // Fetch available models on component mount
  useEffect(() => {

    let isMounted = true;
    setAvailableModels(null);
    setError(null);
    
    fetch('/available_models')
      .then(response => {
        if (!response.ok) throw new Error("Failed to load models");
        return response.json();
      })
      .then(data => {
        if (!isMounted) return;
        
        const models = Object.entries(data).map(([id, name]) => ({
          id: parseInt(id),
          name: name
        }));
        
        setAvailableModels(models);
        
        // Set default model to ID 3 (GPT-4 nano) if available
        const defaultModel = models.find(m => m.id === 3) || (models[0] && models[0]);
        if (defaultModel) setSelectedModel(defaultModel.id);
      })
      .catch(err => {
        if (!isMounted) return;
        setError("Failed to load available models from server.");
        setAvailableModels([]);
      });
      
    return () => {
      isMounted = false;
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }
    };
  }, []);

  // Start analysis function
  function startAnalysis() {
    if (selectedModel === null) {
      setError("Please select an LLM model first");
      return;
    }
    closedByPipeline.current = false;
    setIsRunning(true);
    setError(null);
    setAgentSteps([]);
    setLog([]);
    setLlmCalls(0);
    setReportUrl(null);
    setAgentSetup(null);
    
    // Reset KPIs
    setKpis({
      latency: 0,
      tokens: 0,
      cost: 0,
      tool_calls: 0,
      successful_tool_calls: 0,
      errors: 0,
      relevance: "N/A",
      faithfulness: "N/A"
    });

    // Close existing connection if any
    if (eventSourceRef.current) {
      eventSourceRef.current.close();
      eventSourceRef.current = null;
    }
    setError(null);

    // Get selected model name
    const selectedModelObj = availableModels.find(m => m.id === selectedModel);
    const modelName = selectedModelObj ? selectedModelObj.name : "gpt-4.1-nano-2025-04-14";
    console.log("availableModels", availableModels, "selectedModel", selectedModel, "selectedModelObj", selectedModelObj, "modelName", modelName);

    // Create SSE connection
    const eventSource = new EventSource(
      `/stream?company=${encodeURIComponent(company)}&year=${year}&report_type=${reportType}&target_model=${encodeURIComponent(modelName)}&verbose=${verbose}`
    );
    eventSourceRef.current = eventSource;


    eventSource.onmessage = (event) => {
      try {
        const eventData = JSON.parse(event.data);
        setLog(prev => [...prev, event.data]);

        // --- Logic for Setup Progress from generic logs ---
        if (eventData.event_type === 'log' && eventData.data.message) {
          const message = eventData.data.message;
          const statusUpdates = {};
          if (message.includes("API keys loaded successfully")) {
            setSetupStatus(prev => ({ ...prev, api: "success" }));
          }
          if (message.includes("LLM config loaded for model")) {
            setSetupStatus(prev => ({ ...prev, llm: "success" }));
          }
          if (message.includes("--- Final Agent Config ---")) {
              setSetupStatus(prev => ({ ...prev, tools: "success" }));
          }
          try {
            // Extract JSON portion from log message
            const jsonPart = message.split(' - ').pop();
            const logData = JSON.parse(jsonPart);
            
            if (logData.event_type === 'agent_end' && 
                logData.data.agent_name === 'CompanyResolver' &&
                logData.data.output.status === 'company_found') {
              setSetupStatus(prev => ({ ...prev, region: "success" }));
            }
          } catch (e) {   // Not a JSON-parsable log, skip
          }
          if (Object.keys(statusUpdates).length > 0) {
            setSetupStatus(prev => ({ ...prev, ...statusUpdates }));
          }
        }

      // Process event types
      switch(eventData.event_type) {
        case 'agent_start':
          setAgentSteps(prev => [
            ...prev, 
            {
              id: `${eventData.data.agent_name}-${Date.now()}`, // Unique ID
              agentName: eventData.data.agent_name,
              toolName: 'Processing...',
              status: 'Running',
              duration: null
            }
          ]);
          break;
          case 'agent_setup':
            setAgentSetup(eventData.data.roles);
            setRegion(eventData.data.region);
            // This confirms agents are configured.
            setSetupStatus(prev => ({ ...prev, agents: "success" }));
            break;
           
          case 'tool_result':
            setAgentSteps(prev => prev.map(step => 
              step.id.startsWith(eventData.data.agent_name) && step.status === 'Running'
                ? { 
                    ...step, 
                    toolName: eventData.data.tool_name,
                    status: eventData.data.success ? 'Running' : 'Error'
                  }
                : step
            ));
            setKpis(prev => ({
              ...prev,
              tool_calls: (prev.tool_calls || 0) + 1,
              successful_tool_calls: (prev.successful_tool_calls || 0) + (eventData.data.success ? 1 : 0)
            }));
            break;
              
          case 'llm_metrics':
            setLlmCalls(prev => prev + 1);
            setKpis(prev => ({
              ...prev,
              tokens: prev.tokens + (eventData.data.tokens || 0),
              cost: prev.cost + (eventData.data.cost || 0)
            }));
            break;
            
          case 'pipeline_end':
            console.log("[pipeline_end] Event received:", eventData);
            setKpis(prev => ({
              ...prev,
              latency: eventData.data.end_to_end_latency_ms / 1000
            }));
            // Extract report URL from final output
            if (eventData.data.final_output) {
              const match = eventData.data.final_output.match(/report available at: (.*)/i);
              if (match && match[1]) setReportUrl(match[1]);
            }
            break;
            
          case 'evaluation_metric':
            console.log("evaluation_metric Event received:", eventData);
            if (eventData.data.metric_name === 'Answer Relevance') {
              setKpis(prev => ({ ...prev, relevance: eventData.data.score }));
            }
            if (eventData.data.metric_name === 'Faithfulness') {
              setKpis(prev => ({ ...prev, faithfulness: eventData.data.score }));
            }
            break;
            
          case 'pipeline_error':
            console.error("Pipeline error event received:", eventData);
            setError(eventData.data.error || "Pipeline error occurred");
            setKpis(prev => ({
              ...prev,
              errors: prev.errors + 1
            }));
            break;
        }
      } catch (e) {
        console.error("Error parsing event:", e);
      }
    };

    eventSource.onerror = () => {
      console.error("EventSource error:", eventSource.readyState);
      console.log("EventSource error event received:", eventData);
      if (!closedByPipeline.current) {
        setError("Connection to server failed");
      }
      setIsRunning(false);
      eventSource.close();
      closedByPipeline.current = false; // reset for next run
    };


    // Handle pipeline completion
    eventSource.addEventListener('pipeline_complete', () => {
      closedByPipeline.current = true;   // mark as intentional
      setIsRunning(false);
      eventSource.close();
    });
  }

  // Loading state
  if (availableModels === null) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <IconSpinner />
        <span className="mt-2 text-gray-500">Loading available LLM models...</span>
      </div>
    );
  }

  // Error or no models state
  if (error || !availableModels.length) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <span className="text-red-600">{error || "No LLM models available from backend."}</span>
      </div>
    );
  }

  return (
    <div>
      <h1 className="text-2xl font-bold mb-6">Financial Analyzer</h1>
      <div className="flex flex-col md:flex-row gap-6">
        {/* Sidebar */}
        <div className="md:w-1/3 flex flex-col gap-4">
          <AnalysisConfig
            company={company}
            setCompany={setCompany}
            year={year}
            setYear={setYear}
            reportType={reportType}
            setReportType={setReportType}
            selectedModel={selectedModel}
            setSelectedModel={setSelectedModel}
            availableModels={availableModels}
            isRunning={isRunning}
            onStart={startAnalysis}
            verbose={verbose}
            setVerbose={setVerbose}
          />
          <LLMUsage llmCalls={llmCalls} />
        </div>
        {/* Main area */}
        <div className="md:w-2/3 flex flex-col gap-4">
          <AgentToolTable agentSteps={agentSteps} />
          <RawEventLog log={log} />
        </div>
        {/* Right Sidebar */}
        <div className="md:w-1/3 flex flex-col gap-4">
          <LoggingSetupStatus setupStatus={setupStatus} />
          <PipelineKPIs kpis={kpis} reportUrl={reportUrl} />
          
          {/* Agent Setup Panel - Always Visible Header */}
          <div className="bg-white rounded-lg shadow p-4 mb-4">
            <div className="flex items-center font-semibold mb-2">
              <svg className="h-4 w-4 text-blue-500 mr-1" fill="none" viewBox="0 0 24 24">
                <circle cx="12" cy="8" r="3.5" stroke="currentColor" strokeWidth="1.5" />
                <path d="M5 15C5 12.2386 7.23858 10 10 10H14C16.7614 10 19 12.2386 19 15V16C19 17.1046 18.1046 18 17 18H7C5.89543 18 5 17.1046 5 16V15Z" 
                      stroke="currentColor" strokeWidth="1.5" />
              </svg>
              Agent Setup: {region === "IN" ? "India" : "US"}
            </div>
            
            {agentSetup && agentSetup.leader && agentSetup.agents ? (
              <>
                <div className="mb-3">
                  <div className="font-medium text-sm flex items-center">
                    <svg className="h-4 w-4 text-yellow-500 mr-1" fill="none" viewBox="0 0 24 24">
                      <circle cx="12" cy="12" r="8" stroke="currentColor" strokeWidth="1.5" />
                      <path d="M12 8V12M12 12L14 14" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
                    </svg>
                    Leader
                  </div>
                  <div className="text-xs ml-5">
                    <div className="font-semibold">{agentSetup.leader.title}</div>
                    <ul className="list-disc list-inside mt-1">
                      {agentSetup.leader.responsibilities.map((resp, i) => (
                        <li key={i} className="text-gray-600">{resp}</li>
                      ))}
                    </ul>
                  </div>
                </div>
                
                <div>
                  <div className="font-medium text-sm flex items-center">
                    <svg className="h-4 w-4 text-gray-500 mr-1" fill="none" viewBox="0 0 24 24">
                      <rect x="4" y="4" width="16" height="16" rx="2" stroke="currentColor" strokeWidth="1.5" />
                      <path d="M8 12H16M12 8V16" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" />
                    </svg>
                    Agents
                  </div>
                  <div className="space-y-2 mt-2">
                    {agentSetup.agents.map((agent, index) => (
                      <div key={index} className="text-xs ml-5">
                        <div className="font-semibold">{agent.title}</div>
                        <ul className="list-disc list-inside">
                          {agent.responsibilities.map((resp, i) => (
                            <li key={i} className="text-gray-600">{resp}</li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                </div>
              </>
            ) : (
              <div className="text-gray-400 text-xs">Loading agent details...</div>
            )}
          </div>
        </div>
      </div>
      {error && <div className="mt-4 text-red-600">{error}</div>}
    </div>
  );
}

ReactDOM.createRoot(document.getElementById("root")).render(<App />);
</script>
</body>
</html>
